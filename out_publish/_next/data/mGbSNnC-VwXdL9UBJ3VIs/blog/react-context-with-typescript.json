{"pageProps":{"mdxSource":{"compiledSource":"\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar layoutProps = {};\nvar MDXLayout = \"wrapper\";\n\nfunction MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"When we create a context using TypeScript the compiler expects us to provide a default value, usually, but not always, this is set to null or undefined. This is fine in a JavaScript project but when using TypeScript it means that we have to check for null or undefined every time we want to use the context. This is a helper hook that does the heavy lifting for us.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"function useCreateNoNullContext<T>(contextName: string) {\\n  const context = React.createContext<T | undefined>(undefined);\\n\\n  function useNoNullContext() {\\n    const noNullContext = React.useContext(context);\\n    if (!noNullContext) {\\n      throw new Error(\\n        `${contextName} must be used inside a provider with a value`,\\n      );\\n    }\\n    return noNullContext;\\n  }\\n  return [useNoNullContext, context.Provider] as const;\\n}\\n\")), mdx(\"p\", null, \"Our new hook accepts our contexts name for use in a thrown error message if its used outside of its provider. This is optional but will help with debugging the issue if you come across it. It then create a new context for us, passing in our generic or undefined. It then creates a new internal hook which runs the check for null or undefined for us by creating an additional context which is passed the parent functions context (the one we created first) and checking its value before returning it back. The parent function then returns a tuple with the inner hook and the parents contexts provider. Its set to const with a const assertion which sets the literals as readonly.\"), mdx(\"p\", null, \"We can then use our new hook like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"interface ContextValues {\\n  isValue: boolean;\\n  setValue: React.Dispatch<React.SetStateAction<boolean>>;\\n}\\n\\nconst [useContextValue, ContextValueProvider] = useCreateNoNullContext<\\n  ContextValues\\n>('useContextValue');\\n\")), mdx(\"p\", null, \"We have created an interface which will be passed to the context hook as its type, we are also passing in the name of our context as a string to be used in an error message if thrown. The naming of the context and the provider can be anything but the order of destructuring is important as they are returned as the context first, then the provider. Making sure to wrap whatever components are going to use our context somewhere in the component tree we can then use our new context hook like so:\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-typescript\"\n  }), \"const { isValue, setValue } = useContextValue();\\n\")));\n}\n\n;\nMDXContent.isMDXComponent = true;","renderedOutput":"<p>When we create a context using TypeScript the compiler expects us to provide a default value, usually, but not always, this is set to null or undefined. This is fine in a JavaScript project but when using TypeScript it means that we have to check for null or undefined every time we want to use the context. This is a helper hook that does the heavy lifting for us.</p><pre><pre class=\"prism-code language-typescript\" style=\"color:#9CDCFE;background-color:#1E1E1E;overflow:scroll;margin-top:20px;margin-bottom:20px;padding:16px;display:flex;flex-direction:column;width:100%;position:relative\"><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">function</span><span class=\"token plain\"> useCreateNoNullContext</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&lt;</span><span class=\"token constant\" style=\"color:rgb(100, 102, 149)\">T</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&gt;</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token plain\">contextName</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\" style=\"color:rgb(86, 156, 214)\">string</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">const</span><span class=\"token plain\"> context </span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">=</span><span class=\"token plain\"> </span><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">.</span><span class=\"token property-access\">createContext</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&lt;</span><span class=\"token constant\" style=\"color:rgb(100, 102, 149)\">T</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">|</span><span class=\"token plain\"> undefined</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&gt;</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token plain\">undefined</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">function</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(220, 220, 170)\">useNoNullContext</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">const</span><span class=\"token plain\"> noNullContext </span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">=</span><span class=\"token plain\"> </span><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">.</span><span class=\"token method function property-access\" style=\"color:rgb(220, 220, 170)\">useContext</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token plain\">context</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">if</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">!</span><span class=\"token plain\">noNullContext</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">      </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">throw</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">new</span><span class=\"token plain\"> </span><span class=\"token class-name\" style=\"color:rgb(78, 201, 176)\">Error</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">        </span><span class=\"token template-string template-punctuation string\" style=\"color:rgb(206, 145, 120)\">`</span><span class=\"token template-string interpolation interpolation-punctuation punctuation\" style=\"color:rgb(212, 212, 212)\">${</span><span class=\"token template-string interpolation\">contextName</span><span class=\"token template-string interpolation interpolation-punctuation punctuation\" style=\"color:rgb(212, 212, 212)\">}</span><span class=\"token template-string string\" style=\"color:rgb(206, 145, 120)\"> must be used inside a provider with a value</span><span class=\"token template-string template-punctuation string\" style=\"color:rgb(206, 145, 120)\">`</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">,</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">      </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">    </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">    </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">return</span><span class=\"token plain\"> noNullContext</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">return</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">[</span><span class=\"token plain\">useNoNullContext</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">,</span><span class=\"token plain\"> context</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">.</span><span class=\"token property-access maybe-class-name\">Provider</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">]</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">as</span><span class=\"token plain\"> </span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">const</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">}</span></div><style data-emotion-css=\"13tafan\">.css-13tafan{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-transition:all 250ms;transition:all 250ms;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap;vertical-align:middle;outline:none;width:auto;justify-self:flex-end;position:absolute;top:0;right:20px;color:brand.crayola.300;margin-top:4px;text-transform:uppercase;font-weight:600;}</style><button type=\"button\" class=\"chakra-button css-13tafan\" aria-label=\"Copy text\" role=\"button\">Grab It</button></pre></pre><p>Our new hook accepts our contexts name for use in a thrown error message if its used outside of its provider. This is optional but will help with debugging the issue if you come across it. It then create a new context for us, passing in our generic or undefined. It then creates a new internal hook which runs the check for null or undefined for us by creating an additional context which is passed the parent functions context (the one we created first) and checking its value before returning it back. The parent function then returns a tuple with the inner hook and the parents contexts provider. Its set to const with a const assertion which sets the literals as readonly.</p><p>We can then use our new hook like so:</p><pre><pre class=\"prism-code language-typescript\" style=\"color:#9CDCFE;background-color:#1E1E1E;overflow:scroll;margin-top:20px;margin-bottom:20px;padding:16px;display:flex;flex-direction:column;width:100%;position:relative\"><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">interface</span><span class=\"token plain\"> </span><span class=\"token class-name\" style=\"color:rgb(78, 201, 176)\">ContextValues</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">{</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  isValue</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">:</span><span class=\"token plain\"> </span><span class=\"token builtin\" style=\"color:rgb(86, 156, 214)\">boolean</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  setValue</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">:</span><span class=\"token plain\"> </span><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">.</span><span class=\"token property-access maybe-class-name\">Dispatch</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&lt;</span><span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">.</span><span class=\"token property-access maybe-class-name\">SetStateAction</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&lt;</span><span class=\"token builtin\" style=\"color:rgb(86, 156, 214)\">boolean</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&gt;&gt;</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\"></span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">}</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\" style=\"display:inline-block\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\"></span><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">const</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">[</span><span class=\"token plain\">useContextValue</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">,</span><span class=\"token plain\"> </span><span class=\"token maybe-class-name\">ContextValueProvider</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">]</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">=</span><span class=\"token plain\"> useCreateNoNullContext</span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&lt;</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\">  </span><span class=\"token maybe-class-name\">ContextValues</span><span class=\"token plain\"></span></div><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token plain\"></span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">&gt;</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token string\" style=\"color:rgb(206, 145, 120)\">&#x27;useContextValue&#x27;</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span></div><style data-emotion-css=\"13tafan\">.css-13tafan{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-transition:all 250ms;transition:all 250ms;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap;vertical-align:middle;outline:none;width:auto;justify-self:flex-end;position:absolute;top:0;right:20px;color:brand.crayola.300;margin-top:4px;text-transform:uppercase;font-weight:600;}</style><button type=\"button\" class=\"chakra-button css-13tafan\" aria-label=\"Copy text\" role=\"button\">Grab It</button></pre></pre><p>We have created an interface which will be passed to the context hook as its type, we are also passing in the name of our context as a string to be used in an error message if thrown. The naming of the context and the provider can be anything but the order of destructuring is important as they are returned as the context first, then the provider. Making sure to wrap whatever components are going to use our context somewhere in the component tree we can then use our new context hook like so:</p><pre><pre class=\"prism-code language-typescript\" style=\"color:#9CDCFE;background-color:#1E1E1E;overflow:scroll;margin-top:20px;margin-bottom:20px;padding:16px;display:flex;flex-direction:column;width:100%;position:relative\"><div class=\"token-line\" style=\"color:#9CDCFE\"><span class=\"token keyword\" style=\"color:rgb(86, 156, 214)\">const</span><span class=\"token plain\"> </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">{</span><span class=\"token plain\"> isValue</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">,</span><span class=\"token plain\"> setValue </span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">}</span><span class=\"token plain\"> </span><span class=\"token operator\" style=\"color:rgb(212, 212, 212)\">=</span><span class=\"token plain\"> </span><span class=\"token function\" style=\"color:rgb(220, 220, 170)\">useContextValue</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">(</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">)</span><span class=\"token punctuation\" style=\"color:rgb(212, 212, 212)\">;</span></div><style data-emotion-css=\"13tafan\">.css-13tafan{display:-webkit-inline-box;display:-webkit-inline-flex;display:-ms-inline-flexbox;display:inline-flex;-webkit-appearance:none;-moz-appearance:none;appearance:none;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-transition:all 250ms;transition:all 250ms;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;white-space:nowrap;vertical-align:middle;outline:none;width:auto;justify-self:flex-end;position:absolute;top:0;right:20px;color:brand.crayola.300;margin-top:4px;text-transform:uppercase;font-weight:600;}</style><button type=\"button\" class=\"chakra-button css-13tafan\" aria-label=\"Copy text\" role=\"button\">Grab It</button></pre></pre>","scope":{"title":"React context with TypeScript","published":true,"category":"TypeScript","author":"Richard Haines","tags":["react context","typescript"],"pin":false,"description":"Create a context that does away with null checks","growth":"full"}},"frontMatter":{"title":"React context with TypeScript","published":true,"category":"TypeScript","author":"Richard Haines","tags":["react context","typescript"],"pin":false,"description":"Create a context that does away with null checks","growth":"full"},"slug":["react-context-with-typescript"]},"__N_SSG":true}